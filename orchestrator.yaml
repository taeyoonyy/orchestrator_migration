data:
  accounts:
    persistent: true
  entities:
    persistent: true
  files:
    persistent: true
  groups:
    persistent: true
  setting_information:
    default:
      engineer_information:
        engineer:
          email: ""
          mobile: ""
          name: ""
        inspector:
          email: ""
          mobile: ""
          name: ""
      license:
        expriation_date: "UNLIMITED"
        license_id: "ENTERPRISE"
      system:
        application_version: ""
        platform_version: ""
        system_name: "Orchestrator"
    persistent: true
  token:
    persistent: true
function:
  get_api_server_path:
    logic:
      $action: "elixir"
      value: |
        case v do
          :INTERACTOR_CONNECTION_CHECK -> "/api/device/test"
          :INSIGHT_CONNECTION_CHECK ->  "/api/config/dashboard_test"
          :INTERACTOR_INFORMATION -> "/api/device/detail"
          :INTERACTOR_CPU_AVERAGE -> "/api/device/cpu_average"
          :INTERACTOR_CPU_CORE -> "/api/device/core_usage"
          :INTERACTOR_PROCESS -> "/api/device/process_list"
          :INTERACTOR_RESOURCE -> "/api/device/system_resources"
          :INTERACTOR_FILE_DOWNLOAD -> "/api/file/download"
          :INTERACTOR_FILE_LIST -> "/api/file/list"
          :INTERACTOR_PROJECT_EXPORT -> "/api/config/get"
          :INTERACTOR_EVENT_HISTORY -> "/api/event/history"
          :INTERACTOR_EVENT_LAST_ID -> "/api/event/history_last_id"
          _ -> "NO URL"
        end
  get_response_struct:
    logic:
      $action: "elixir"
      value: |
        %{
           "method" => nil,
           "res_body" => nil,
           "is_success" => true
         }
  http_request:
    logic:
      $action: "elixir"
      value: |
        Log.info(v)
        method = if v[:body], do: "POST", else: "GET"
        headers = if v[:headers], do: v[:headers], else: %{"Content-Type" => "application/json"}
        req_data = %{
          "headers" => headers,
          "url" => v[:url],
          "method" => method,
          "body" => v[:body] |> ISON.encode() |> Poison.encode!()
        }
        
        Log.info(inspect req_data)
        
        case Service.Http.request(req_data) do
          {:ok, res_data} ->
            {result, data} = res_data |> Map.from_struct() |> Map.get(:body) |> Poison.decode
            if result === :ok do
              data
            else
              res_data |> Map.from_struct() |> Map.get(:body)
            end
          {:error, res_data} ->
            reason = res_data |> Map.from_struct() |> Map.get(:reason)
            Logger.info(reason |> inspect)
            reason
          _ -> false
        end
  respond:
    logic:
      $action: "elixir"
      value: |
        # ARGUMENTS MUST BE A MAP LIKE THIS
        # %{
        #   "method" => "POST"
        #   "res_body" => nil, (default nil)
        #   "is_success" => true (default true)
        # }
        
        Log.info(v)
        res_body = v["res_body"]
        parse_res_body = if(is_map(res_body), do: res_body |> ISON.encode() |> Poison.encode!(), else: res_body)
        status_code = case  {v["method"], v["is_success"]} do
          {"GET", true} -> 200
          {"POST", true} -> 201
          {"PUT", true} -> 201
          {"DELETE", true} -> 204
          {_ , false} -> 400
          _ -> 405
        end
        
        # RESPONSE
        response = %{
          "headers" => %{
            "Content-Type" => "application/json"
          },
          "status_code" => status_code
        }
        Log.info(inspect status_code)
        Log.info(inspect parse_res_body)
        
        if (parse_res_body), do: Map.put(response, "body", parse_res_body) , else: response
  return_entity_connection_info:
    logic:
      $action: "elixir"
      value: |
        {category, group, entity} = v
        result = get("entities") |> Enum.filter(fn x -> x["category"] == category && x["group"] == group && x["entity"] == entity end) |> Enum.at(0)
        {result["ip"], result["port"], result["password"]}
        
        # function("return_entity_connection_info", {"interactor", "ytyg", "ytye"})
  set_token:
    logic:
      $action: "elixir"
      value: |
        if get("token") ==  nil, do: set("token", %{})
        set(["token", v["id"]], v["token"])
instance:
  web_server:
    data:
      port: 33346
    event:
      received:
        $action: "match"
        matches:
          - do:
              $action: "elixir"
              value: |
                accounts = (get("accounts") || []) |> Enum.map(fn x -> Map.delete(x, "password") end)
                response = %{ function("get_response_struct") | "method" => v["method"], "res_body" => accounts}
                function("respond", response)
            model:
              $ref: "/api/accounts GET"
          - do:
              $action: "elixir"
              value: |
                # Log.info(v["body"])  %{"id" => "admin", "password" => "admin"}
                accounts = v["body"]
                result_list = get("accounts") |> Enum.filter(fn x -> x["id"] == accounts["id"] && x["password"] == accounts["password"] end)
                response_data = function("get_response_struct")
                response = if !(result_list |> Enum.empty?)  do
                  [result] = result_list
                  token = :rand.uniform(1000)
                  function("set_token", %{"id"=> result["id"], "token" => token})
                  resp_body = %{
                      authority: result["authority"], 
                      id: result["id"],
                      token: token
                  }
                  %{ response_data | "method" => v["method"], "res_body" => resp_body}
                else
                  %{ response_data | "res_body" => %{"message" => "invalid"}, "is_success" => false}
                end
                Log.info(response)
                function("respond", response)
            model:
              $ref: "/api/login POST"
          - do:
              $action: "elixir"
              value: |
                clear(["token", v["headers"]["authorization"]])
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/logout GET"
          - do:
              $action: "elixir"
              value: |
                accounts = get("accounts")
                id = v["body"]["id"]
                new_accounts = Enum.reject(accounts, &match?(%{"id" => ^id}, &1))
                
                clear(["token", v["headers"]["authorization"]])
                
                set("accounts", new_accounts)
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/accounts DELETE"
          - do:
              $action: "elixir"
              value: |
                accounts = get("accounts") || []
                
                new_account = %{
                  "id" => v["body"]["id"],
                  "password" => v["body"]["password"],
                  "authority" => v["body"]["authority"],
                  "comment" => v["body"]["comment"]
                }
                
                set("accounts", accounts ++ [new_account])
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/accounts POST"
          - do:
              $action: "elixir"
              value: |
                Log.info(v["path"]["segment"]["id"])
                
                id = v["path"]["segment"]["id"]
                accounts = get("accounts")
                [account] = accounts |> Enum.filter(fn x -> x["id"] === id end)
                new_account = %{ account | "comment" => v["body"]["comment"]}
                Log.info(inspect new_account)
                
                set("accounts",  Enum.reject(accounts, &match?(%{"id" => ^id}, &1)) ++ [new_account])
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/accounts/{id} PUT"
          - do:
              $action: "elixir"
              value: |
                setting = get("setting_information")
                response = %{ function("get_response_struct") | "method" => v["method"], "res_body" => setting}
                function("respond", response)
            model:
              $ref: "/api/setting GET"
          - do:
              $action: "elixir"
              value: |
                response = try do
                  engineer = v["body"]["engineer"]
                  inspector = v["body"]["inspector"]
                  set(["setting_information", "engineer_information", "engineer"], engineer)
                  set(["setting_information", "engineer_information", "inspector"], inspector)
                  %{function("get_response_struct") | "method" => v["method"]}
                rescue
                  _ -> %{function("get_response_struct") | "is_success" => false, "res_body" => "invalid input data"}
                end
                function("respond", response)
            model:
              $ref: "/api/setting/engineer-inspector-information POST"
          - do:
              $action: "elixir"
              value: |
                response = try do
                  system_name = v["body"]["system_name"]
                  set(["setting_information", "system", "system_name"], system_name)
                  %{function("get_response_struct") | "method" => v["method"]}
                rescue
                  _ -> %{function("get_response_struct") | "is_success" => false, "res_body" => "invalid input data"}
                end
                function("respond", response)
            model:
              $ref: "/api/setting/system-information POST"
          - do:
              $action: "elixir"
              value: |
                # ARGUMENTS
                target_path = if v["path"]["segment"]["target"] === "interactor", do: function("get_api_server_path", :INTERACTOR_CONNECTION_CHECK), else: function("get_api_server_path", :INSIGHT_CONNECTION_CHECK)
                port = if is_number(v["body"]["port"]), do: to_string(v["body"]["port"]), else: v["body"]["port"]
                url = "http://" <> v["body"]["ip"] <> ":" <> port <> target_path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => v["body"]["password"]}})
                
                # RESPONSE
                response_data = function("get_response_struct") 
                response = if result["result"] === "success" do
                  %{ response_data | "method" => v["method"], "res_body" => %{"message" => "connection check success"}}
                else
                  %{ response_data | "res_body" => %{"message" => "connection check fail"}, "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/connections/{target} POST"
          - do:
              $action: "elixir"
              value: |
                entities = get("entities") || []
                new_entity = %{
                  "category" => v["body"]["category"],
                  "group" => v["body"]["group"],
                  "entity" => v["body"]["entity"],
                  "ip" => v["body"]["ip"],
                  "port" => v["body"]["port"],
                  "password" => v["body"]["password"]
                }
                
                set("entities", entities ++ [new_entity])
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/entities POST"
          - do:
              $action: "elixir"
              value: |
                entities = (get("entities") || []) |> Enum.map(fn x -> Map.delete(x, "password") end)
                response = %{ function("get_response_struct") | "method" => v["method"], "res_body" => entities}
                function("respond", response)
            model:
              $ref: "/api/entities GET"
          - do:
              $action: "elixir"
              value: |
                # {
                # 		"category": "interactor",
                #     "target": "entity",
                #     "group": "group1",
                #     "entity": "entity1-1"
                # }
                
                
                entities = get("entities")
                category = v["body"]["category"]
                group = v["body"]["group"]
                entity = v["body"]["entity"]
                Log.info("YEQWE")
                Log.info(entity)
                
                new_entities = if entity do
                  Enum.reject(entities, &match?(%{"category" => ^category, "group" => ^group, "entity" => ^entity}, &1))
                else
                  Enum.reject(entities, &match?(%{"category" => ^category, "group" => ^group}, &1))
                  Log.info("HERE?")
                  set("groups", Enum.reject(get("groups"), &match?(%{"category" => ^category, "group" => ^group}, &1)))
                end
                Log.info(new_entities)
                set("entities", new_entities)
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/entities DELETE"
          - do:
              $action: "elixir"
              value: |
                category = v["parameters"]["category"]
                group = v["parameters"]["group"]
                
                group_info = %{
                  "category" => category,
                  "group" => group,
                  "group_information" => v["body"]
                }
                
                groups = get("groups") || []
                
                set("groups",  Enum.reject(groups, &match?(%{"category" => ^category, "group" => ^group}, &1)) ++ [group_info])
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/groups POST"
          - do:
              $action: "elixir"
              value: |
                category = v["parameters"]["category"]
                group = v["parameters"]["group"]
                groups = get("groups") || []
                res_body = groups |> Enum.filter(fn x -> x["category"] == category && x["group"] == group end) |> Enum.at(0)
                res_body = if res_body, do: res_body, else: nil
                response = %{function("get_response_struct") | "method" => v["method"], "res_body" => res_body}
                function("respond", response)
            model:
              $ref: "/api/groups GET"
          - do:
              $action: "elixir"
              value: |
                # PREPARE DATA FOR HTTP REQUEST
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                path = function("get_api_server_path", :INTERACTOR_INFORMATION)
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password}})
                
                # RESPONSE
                response_data = function("get_response_struct") 
                response = if result["result"] === "success" do
                  %{ response_data | "method" => v["method"], "res_body" => result["data"]}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/info GET"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                
                target = case v["path"]["segment"]["target"] do
                  "cpu-average" -> :INTERACTOR_CPU_AVERAGE
                  "cpu-core" -> :INTERACTOR_CPU_CORE
                  "process" -> :INTERACTOR_PROCESS
                  "resocures" -> :INTERACTOR_RESOURCE
                end
                
                path = function("get_api_server_path", target)
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password}})
                                
                # RESPONSE
                response_data = function("get_response_struct") 
                response = if result["result"] === "success" do
                  %{ response_data | "method" => v["method"], "res_body" => result["data"]}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/system/{target} GET"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                file_path = v["parameters"]["file-path"]
                path = function("get_api_server_path", :INTERACTOR_FILE_LIST)
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                url = "http://" <> ip <> ":" <> port <> path
                Log.info(file_path)
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password, "path" => file_path}})
                
                # RESPONSE
                response_data = function("get_response_struct") 
                response = if result["result"] === "success" do
                  %{ response_data | "method" => v["method"], "res_body" => result["data"]}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/files GET"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                file_path = v["parameters"]["file-path"]
                path = function("get_api_server_path", :INTERACTOR_FILE_DOWNLOAD)
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password, "path" => file_path}, "headers": %{"Accept" => "application/octet-stream"}})
                
                # RESPONSE
                response_data = function("get_response_struct")
                response = %{ response_data | "method" => v["method"], "res_body" => result}
                function("respond", response)
            model:
              $ref: "/api/interactor/files/content GET"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                
                path = function("get_api_server_path", :INTERACTOR_PROJECT_EXPORT)
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password}, "headers": %{"Accept" => "application/octet-stream"}})
                
                # RESPONSE
                response_data = function("get_response_struct")
                response = if result["result"] === "success" do
                 %{ response_data | "method" => v["method"], "res_body" => result["data"]}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/files/project GET"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                
                index = v["body"]["index"]
                length = v["body"]["length"]
                
                
                path = function("get_api_server_path", :INTERACTOR_EVENT_HISTORY)
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password, "index" => index, "length" => length}})
                
                # RESPONSE
                response_data = function("get_response_struct")
                response = if result["result"] === "success" do
                 %{ response_data | "method" => v["method"], "res_body" => result["data"] |> Enum.at(1) |> Map.get("rows")}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/event/history POST"
          - do:
              $action: "elixir"
              value: |
                category = "interactor"
                group = v["parameters"]["group"]
                entity = v["parameters"]["entity"]
                
                path = function("get_api_server_path", :INTERACTOR_EVENT_LAST_ID)
                {ip, port, password} = function("return_entity_connection_info", {category, group, entity})
                url = "http://" <> ip <> ":" <> port <> path
                
                # REQUEST TO API SERVER
                result = function("http_request", %{"url": url, "body": %{"password" => password}})
                [[id]] = result["data"] |> Enum.at(1) |> Map.get("rows")
                
                # RESPONSE
                response_data = function("get_response_struct")
                response = if result["result"] === "success" do
                 %{ response_data | "method" => v["method"], "res_body" => id}
                else
                  %{ response_data | "is_success" => false}
                end
                function("respond", response)
            model:
              $ref: "/api/interactor/event/last-id GET"
          - do:
              $action: "elixir"
              value: |
                
                application = v["path"]["segment"]["application"]
                file_category = v["path"]["segment"]["file-category"]
                
                file_name = v["body"]["fileName"]
                content = v["body"]["content"]
                upload_time = v["body"]["uploadTime"]
                comment = v["body"]["comment"]
                
                # SET FILE INFO AT FILES object
                file_info =%{"file_name" => file_name, "upload_tile" => upload_time, "comment" => comment}
                original = Interactor.Object.get_in(get("files"), [application, file_category]) || []
                set("files",Interactor.Object.put_in(get("files"), [application, file_category],  original ++ [file_info]))
                
                # UPLOAD FILD TO FOLDER
                file_path = "orchestrator/files/" <> application <> "/" <> file_category
                Log.info(file_path)
                File.mkdir_p(file_path |> Path.expand())
                File.write(file_path <> "/" <> file_name, content)
                
                # RESPONSE
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/{application}/update/{file-category} POST"
          - do:
              $action: "elixir"
              value: |
                application = v["path"]["segment"]["application"]
                file_category = v["path"]["segment"]["file-category"]
                
                # GET FILE INFO 
                file_info = Interactor.Object.get_in(get("files"), [application, file_category]) || []
                
                # RESPONSE
                response = %{function("get_response_struct") | "method" => v["method"], "res_body" => file_info}
                function("respond", response)
            model:
              $ref: "/api/{application}/update/{file-category}/list GET"
          - do:
              $action: "elixir"
              value: |
                application = v["path"]["segment"]["application"]
                file_category = v["path"]["segment"]["file-category"]
                file_name = v["parameters"]["file-name"]
                
                Log.info(file_name)
                
                # DELETE FILE INFO 
                original_list = Interactor.Object.get_in(get("files"), [application, file_category]) || []
                changed_list = original_list |> Enum.filter(fn x -> x["file_name"] !== file_name end)
                set("files",Interactor.Object.put_in(get("files"), [application, file_category],  changed_list))
                
                # DELETE FILE
                file_path = "orchestrator/files/" <> application <> "/" <> file_category <> "/" <> file_name
                File.rm(file_path)
                
                # RESPONSE
                response = %{function("get_response_struct") | "method" => v["method"]}
                function("respond", response)
            model:
              $ref: "/api/{application}/update/{file-category} DELETE"
        none:
          $action: "http response"
          body:
            $action: "sequence"
            value:
              - $action: "match"
                $set: "dir"
                key:
                  - "path"
                matches:
                  - do: "/index.html"
                    model:
                      const: "/"
                  - do:
                      $action: "get"
                      key: "path"
                    model:
                      pattern: "^/(js|css|fonts|img|/favicon.ico)"
                      type: "string"
                none: "/index.html"
              - $action: "elixir"
                value: |
                  ui_location = (File.cwd!() |> String.split("EdgeHub/interactor") |> Enum.at(0)) <> "EdgeHub/orchestrator/dist" <> v["dir"]
                  File.read!(ui_location)
    use: "http server"
model:
  /api/accounts DELETE:
    $parser: "json"
    properties:
      method:
        const: "DELETE"
        type: "string"
      path:
        const: "/api/accounts"
        type: "string"
    type: "object"
  /api/accounts GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/accounts"
        type: "string"
    type: "object"
  /api/accounts POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/accounts"
        type: "string"
    type: "object"
  /api/accounts/{id} PUT:
    $parser: "json"
    properties:
      method:
        const: "PUT"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/accounts/{id}"
    type: "object"
  /api/connections/{target} POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/connections/{target}"
    type: "object"
  /api/entities DELETE:
    $parser: "json"
    properties:
      method:
        const: "DELETE"
        type: "string"
      path:
        const: "/api/entities"
        type: "string"
    type: "object"
  /api/entities GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/entities"
        type: "string"
    type: "object"
  /api/entities POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/entities"
        type: "string"
    type: "object"
  /api/groups GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/groups"
        type: "string"
    type: "object"
  /api/groups POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/groups"
        type: "string"
    type: "object"
  /api/interactor/event/history POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/interactor/event/history"
        type: "string"
    type: "object"
  /api/interactor/event/last-id GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/interactor/event/last-id"
    type: "object"
  /api/interactor/files GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/interactor/files"
    type: "object"
  /api/interactor/files/content GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/interactor/files/content"
        type: "string"
    type: "object"
  /api/interactor/files/project GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/interactor/files/project"
        type: "string"
    type: "object"
  /api/interactor/info GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/interactor/info"
        type: "string"
    type: "object"
  /api/interactor/system/{target} GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/interactor/system/{target}"
    type: "object"
  /api/login POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/login"
        type: "string"
    type: "object"
  /api/logout GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/logout"
        type: "string"
    type: "object"
  /api/setting GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        const: "/api/setting"
        type: "string"
    type: "object"
  /api/setting/engineer-inspector-information POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/setting/engineer-inspector-information"
        type: "string"
    type: "object"
  /api/setting/system-information POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        const: "/api/setting/system-information"
        type: "string"
    type: "object"
  /api/{application}/update/{file-category} DELETE:
    $parser: "json"
    properties:
      method:
        const: "DELETE"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/{application}/update/{file-category}"
    type: "object"
  /api/{application}/update/{file-category} POST:
    $parser: "json"
    properties:
      method:
        const: "POST"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/{application}/update/{file-category}"
    type: "object"
  /api/{application}/update/{file-category}/list GET:
    $parser: "json"
    properties:
      method:
        const: "GET"
        type: "string"
      path:
        $parser: "path"
        pattern: "/api/{application}/update/{file-category}/list"
    type: "object"
service: {}
